{"version":3,"sources":["components/Card.js","components/CardList.js","components/SerchBox.js","components/Header.js","components/Scroll.js","components/ErrorBoundry.js","containers/App.js","actions.js","constants.js","serviceWorker.js","reducers.js","index.js"],"names":["Card","_ref","name","email","id","react_default","a","createElement","className","alt","src","concat","CardList","cardsArray","robots","map","user","i","components_Card","key","SerchBox","searchfield","searchChange","aria-label","type","placeholder","onChange","Header","nextProps","nextState","Component","Scroll","props","style","overflowY","border","height","children","ErrorBoundry","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","hasError","error","info","setState","App","onRequestRobots","_this$props","searchField","onSearchChange","isPending","filteredRobot","filter","robot","toLowerCase","includes","components_Header","components_SerchBox","components_Scroll","components_ErrorBoundry","components_CardList","React","connect","searchRobots","requestRobots","dispatch","event","payload","target","value","fetch","then","response","json","data","catch","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","controller","console","log","onUpdate","onSuccess","initialStateSearch","initialStateRobots","rootReducers","createLogger","combineReducers","arguments","length","undefined","action","assign","store","createStore","applyMiddleware","thunkMiddleware","ReactDOM","render","es","src_containers_App","document","getElementById","URL","process","href","origin","addEventListener","contentType","headers","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.14055d24.chunk.js","sourcesContent":["import React from 'react';\n\n\nconst Card = ({name, email, id})=>{\n\treturn (\n\t\t<div className='bg-light-green dib br3 pa3 ma2 grow shadow-5'>\n\t\t\t<img alt='robots' src={`https://robohash.org/${id}?size=200x200`} />\n\t\t\t<div>\n\t\t\t\t<h4>{name}</h4>\n\t\t\t\t<p>{email}</p>\n\t\t\t</div>\n\t\t</div>\n\t);\n}\n\nexport default Card;","import React from 'react';\nimport Card from './Card';\n\nconst CardList = ({robots})=>{\n\t// if (true){\n\t// \tthrow new Error('Nooooooooo!');\n\t// }\n\t// errorboundry test!\n\tconst cardsArray = robots.map((user,i)=>{\n\t\treturn (\n\t\t\t<Card \n\t\t\tkey={i} \n\t\t\t// unique key is for react to know which one should be deleted !important\n\t\t\tid={user.id} \n\t\t\tname={user.name} \n\t\t\temail={user.email} \n\t\t\t/>\n\t\t);\n\t})\n\treturn (\n\t\t<div>\n\t\t\t{cardsArray}\n\t\t</div>\n\t);\n}\nexport default CardList;","import React from 'react';\n\nconst SerchBox = ({searchfield, searchChange})=>{\n\treturn (\n\t\t<div className = 'pa2'>\n\t\t\t<input \n\t\t\t\taria-label = 'Search Robots'\n\t\t\t\tclassName = 'pa3 ba b-green bg-lightest-blue'\n\t\t\t\ttype = 'search' \n\t\t\t\tplaceholder = 'Serch Robots'\n\t\t\t\tonChange = {searchChange}\n\t\t\t/>\n\t\t</div>\n\t)\n}\n\nexport default SerchBox;","import React, { Component } from 'react';\n\nclass Header extends Component{\n\tshouldComponentUpdate(nextProps, nextState){\n\t\treturn false;\n\t}\n\trender(){\n\t\t// console.log('Header');\n\t\treturn <h1 className='f1'>RoboFriends</h1>\n\t}\n}\n\nexport default Header;","import React from 'react';\n\nconst Scroll = (props)=>{\n\treturn (\n\t\t// css way: overflow-y    make elements scrollable\n\t\t// jsx way: overflowY\n\t\t<div style={{overflowY: 'scroll', border:'1px solid black', height: '900px'}}>\n\t\t\t{props.children}\n\t\t</div>\n\t);\n};\n\nexport default Scroll;","import React, { Component } from 'react';\n\nclass ErrorBoundry extends Component {\n\tconstructor(props){\n\t\tsuper()\n\t\tthis.state = {\n\t\t\thasError: false\n\t\t}\n\t}\n\n\tcomponentDidCatch(error, info){\n\t\tthis.setState({hasError: true})\n\t}\n\n\trender(){\n\t\tif (this.state.hasError) {\n\t\t\treturn <h1>Ooooops, that's not good</h1>\n\t\t}\n\t\treturn this.props.children\n\n\t}\n}\n\nexport default ErrorBoundry;","\nimport React from 'react';\nimport { connect } from 'react-redux';\nimport CardList from '../components/CardList';\nimport SerchBox from '../components/SerchBox';\nimport Header from '../components/Header';\nimport './App.css';\nimport Scroll from '../components/Scroll';\nimport ErrorBoundry from '../components/ErrorBoundry';\n\nimport { setSearchField, requestRobots } from '../actions';\n\nconst mapStateToProps = state =>{\n  // tell me what state I should listen to\n  return {\n    searchField: state.searchRobots.searchField,\n    robots: state.requestRobots.robots,\n    isPending: state.requestRobots.isPending,\n    error: state.requestRobots.error\n  }\n}\n\nconst mapDispatchToProps = (dispatch) =>{\n  // tell me what props I should listen to and what actions I should dispatch\n  return {\n    onSearchChange: (event) => dispatch(setSearchField(event.target.value)),\n    onRequestRobots: () => dispatch(requestRobots())\n  }\n}\n\nclass App extends React.Component {\n  // constructor(){\n  //   super()\n  //   this.state = {\n  //     robots: [],\n  //     // searchfield: ''\n  //   }\n  // }\n\n  // onSearchChange = (event) => {\n  //   this.setState({searchfield: event.target.value}) ;\n  // }\n\n  componentDidMount(){\n    // part of react mounting\n\n    // console.log(this.props.store);\n\n    // fetch('https://jsonplaceholder.typicode.com/users')\n    //   .then(response => response.json())\n    //   .then(users => this.setState({robots: users}));\n    this.props.onRequestRobots();\n    \n  }\n  render(){\n    // const { robots } = this.state;\n    const { searchField, onSearchChange, robots, isPending } = this.props;\n    const filteredRobot = robots.filter(robot => {\n        return robot.name.toLowerCase().includes(searchField.toLowerCase());\n      }\n    )\n    if (isPending) {\n      return <h1>Loading</h1>\n      // in case the fetch process takes too long time\n    }else{\n      return(\n        // need to return a single parent, such as a div\n      <div className='tc'>\n        <Header />\n        <SerchBox searchChange = {onSearchChange}/>\n        <Scroll>\n          <ErrorBoundry>\n            <CardList robots={filteredRobot} />\n          </ErrorBoundry>  \n        </Scroll>\n      </div>\n    );\n    }\n    \n  }\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(App);","import { \n\tCHANGE_SEARCH_FIELD,\n\tREQUEST_ROBOTS_PENDING,\n\tREQUEST_ROBOTS_SUCCESS,\n\tREQUEST_ROBOTS_FAILED,\n} from './constants.js';\n\nexport const setSearchField = (text) =>{\n\t// console.log(text);\n\treturn {\n\t\ttype: CHANGE_SEARCH_FIELD, // constant variable- uppercase\n\t\tpayload: text\n\t}\n};\n\nexport const requestRobots = () => (dispatch) =>{\n\tdispatch({ type: REQUEST_ROBOTS_PENDING })\n\tfetch('https://jsonplaceholder.typicode.com/users')\n      .then(response => response.json())\n      .then(data => dispatch({ type: REQUEST_ROBOTS_SUCCESS, payload: data }))\n      .catch(error => dispatch({ type: REQUEST_ROBOTS_FAILED, payload: error }))\n}","export const CHANGE_SEARCH_FIELD = 'CHANGE_SEARCH_FIELD';\n\nexport const REQUEST_ROBOTS_PENDING = 'REQUEST_ROBOTS_PENDING';\nexport const REQUEST_ROBOTS_SUCCESS = 'REQUEST_ROBOTS_SUCCESS';\nexport const REQUEST_ROBOTS_FAILED = 'REQUEST_ROBOTS_FAILED';","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import { \n\tCHANGE_SEARCH_FIELD,\n\tREQUEST_ROBOTS_PENDING,\n\tREQUEST_ROBOTS_SUCCESS,\n\tREQUEST_ROBOTS_FAILED,\n} from './constants.js';\n\n\nconst initialStateSearch = {\n\tsearchField: ''\n}\n\nexport const searchRobots = (state=initialStateSearch, action={}) =>{\n\tswitch(action.type){\n\t\t// console.log(action.type);\n\t\tcase CHANGE_SEARCH_FIELD:\n\t\t\treturn Object.assign({}, state, {searchField: action.payload});\n\t\t\t// return new state      not change       changed\n\t\tdefault:\n\t\t\treturn state;\n\t}\n}\n\nconst initialStateRobots = {\n\tisPending: false,\n\trobots: [],\n\terror: ''\n}\n\n\nexport const requestRobots = (state=initialStateRobots, action={}) =>{\n\tswitch(action.type){\n\t\tcase REQUEST_ROBOTS_PENDING:\n\t\t\treturn Object.assign({}, state, {isPending: true});\n\t\tcase REQUEST_ROBOTS_SUCCESS:\n\t\t\treturn Object.assign({}, state, { robots: action.payload, isPending: false});\n\t\tcase REQUEST_ROBOTS_FAILED:\n\t\t\treturn Object.assign({}, state, { error: action.payload, isPending: false});\n\t\tdefault:\n\t\t\treturn state\n\t}\n}\n\n\n\n\n\n\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport { createStore, applyMiddleware, combineReducers } from 'redux';\nimport { createLogger } from 'redux-logger';\nimport thunkMiddleware from 'redux-thunk';\n// async\nimport './index.css';\nimport App from './containers/App';\nimport * as serviceWorker from './serviceWorker';\nimport 'tachyons';\nimport { searchRobots, requestRobots } from './reducers.js';\n\nconst logger = createLogger();\nconst rootReducers = combineReducers({ searchRobots, requestRobots });\n// combine all reducers into root reducers\nconst store = createStore(rootReducers, applyMiddleware( thunkMiddleware));\n// \t\t\t\t\t\t\t\t\t\t\t\t\t\torder: first thunk, then logger\nif (process.env.NODE_ENV !== 'production') {\n  const {whyDidYouUpdate} = require('why-did-you-update');\n  whyDidYouUpdate(React);\n}\n\n\nReactDOM.render(\n\t<Provider store={store}>\n\t\t<App />\n\t</Provider>, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.register();\n"],"sourceRoot":""}